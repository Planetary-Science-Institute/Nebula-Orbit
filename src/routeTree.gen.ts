/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OnboardingImport } from './routes/onboarding'
import { Route as EmployeesImport } from './routes/employees'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminTimeoffImport } from './routes/admin/timeoff'
import { Route as AdminProvisioningImport } from './routes/admin/provisioning'
import { Route as AdminLogsImport } from './routes/admin/logs'
import { Route as AdminEmployeesIndexImport } from './routes/admin/employees/index'
import { Route as AdminEmployeesNewImport } from './routes/admin/employees/new'
import { Route as AdminEmployeesEmployeeGuidImport } from './routes/admin/employees/$employeeGuid'

// Create/Update Routes

const OnboardingRoute = OnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRoute,
} as any)

const EmployeesRoute = EmployeesImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminTimeoffRoute = AdminTimeoffImport.update({
  id: '/timeoff',
  path: '/timeoff',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminProvisioningRoute = AdminProvisioningImport.update({
  id: '/provisioning',
  path: '/provisioning',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminLogsRoute = AdminLogsImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminEmployeesIndexRoute = AdminEmployeesIndexImport.update({
  id: '/employees/',
  path: '/employees/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminEmployeesNewRoute = AdminEmployeesNewImport.update({
  id: '/employees/new',
  path: '/employees/new',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminEmployeesEmployeeGuidRoute = AdminEmployeesEmployeeGuidImport.update(
  {
    id: '/employees/$employeeGuid',
    path: '/employees/$employeeGuid',
    getParentRoute: () => AdminRouteRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/employees': {
      id: '/employees'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesImport
      parentRoute: typeof rootRoute
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingImport
      parentRoute: typeof rootRoute
    }
    '/admin/logs': {
      id: '/admin/logs'
      path: '/logs'
      fullPath: '/admin/logs'
      preLoaderRoute: typeof AdminLogsImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/provisioning': {
      id: '/admin/provisioning'
      path: '/provisioning'
      fullPath: '/admin/provisioning'
      preLoaderRoute: typeof AdminProvisioningImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/timeoff': {
      id: '/admin/timeoff'
      path: '/timeoff'
      fullPath: '/admin/timeoff'
      preLoaderRoute: typeof AdminTimeoffImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/employees/$employeeGuid': {
      id: '/admin/employees/$employeeGuid'
      path: '/employees/$employeeGuid'
      fullPath: '/admin/employees/$employeeGuid'
      preLoaderRoute: typeof AdminEmployeesEmployeeGuidImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/employees/new': {
      id: '/admin/employees/new'
      path: '/employees/new'
      fullPath: '/admin/employees/new'
      preLoaderRoute: typeof AdminEmployeesNewImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/employees/': {
      id: '/admin/employees/'
      path: '/employees'
      fullPath: '/admin/employees'
      preLoaderRoute: typeof AdminEmployeesIndexImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminLogsRoute: typeof AdminLogsRoute
  AdminProvisioningRoute: typeof AdminProvisioningRoute
  AdminTimeoffRoute: typeof AdminTimeoffRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminEmployeesEmployeeGuidRoute: typeof AdminEmployeesEmployeeGuidRoute
  AdminEmployeesNewRoute: typeof AdminEmployeesNewRoute
  AdminEmployeesIndexRoute: typeof AdminEmployeesIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminLogsRoute: AdminLogsRoute,
  AdminProvisioningRoute: AdminProvisioningRoute,
  AdminTimeoffRoute: AdminTimeoffRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminEmployeesEmployeeGuidRoute: AdminEmployeesEmployeeGuidRoute,
  AdminEmployeesNewRoute: AdminEmployeesNewRoute,
  AdminEmployeesIndexRoute: AdminEmployeesIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/employees': typeof EmployeesRoute
  '/onboarding': typeof OnboardingRoute
  '/admin/logs': typeof AdminLogsRoute
  '/admin/provisioning': typeof AdminProvisioningRoute
  '/admin/timeoff': typeof AdminTimeoffRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/employees/$employeeGuid': typeof AdminEmployeesEmployeeGuidRoute
  '/admin/employees/new': typeof AdminEmployeesNewRoute
  '/admin/employees': typeof AdminEmployeesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/employees': typeof EmployeesRoute
  '/onboarding': typeof OnboardingRoute
  '/admin/logs': typeof AdminLogsRoute
  '/admin/provisioning': typeof AdminProvisioningRoute
  '/admin/timeoff': typeof AdminTimeoffRoute
  '/admin': typeof AdminIndexRoute
  '/admin/employees/$employeeGuid': typeof AdminEmployeesEmployeeGuidRoute
  '/admin/employees/new': typeof AdminEmployeesNewRoute
  '/admin/employees': typeof AdminEmployeesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/employees': typeof EmployeesRoute
  '/onboarding': typeof OnboardingRoute
  '/admin/logs': typeof AdminLogsRoute
  '/admin/provisioning': typeof AdminProvisioningRoute
  '/admin/timeoff': typeof AdminTimeoffRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/employees/$employeeGuid': typeof AdminEmployeesEmployeeGuidRoute
  '/admin/employees/new': typeof AdminEmployeesNewRoute
  '/admin/employees/': typeof AdminEmployeesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/employees'
    | '/onboarding'
    | '/admin/logs'
    | '/admin/provisioning'
    | '/admin/timeoff'
    | '/admin/'
    | '/admin/employees/$employeeGuid'
    | '/admin/employees/new'
    | '/admin/employees'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/employees'
    | '/onboarding'
    | '/admin/logs'
    | '/admin/provisioning'
    | '/admin/timeoff'
    | '/admin'
    | '/admin/employees/$employeeGuid'
    | '/admin/employees/new'
    | '/admin/employees'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/employees'
    | '/onboarding'
    | '/admin/logs'
    | '/admin/provisioning'
    | '/admin/timeoff'
    | '/admin/'
    | '/admin/employees/$employeeGuid'
    | '/admin/employees/new'
    | '/admin/employees/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  EmployeesRoute: typeof EmployeesRoute
  OnboardingRoute: typeof OnboardingRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  EmployeesRoute: EmployeesRoute,
  OnboardingRoute: OnboardingRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/employees",
        "/onboarding"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/logs",
        "/admin/provisioning",
        "/admin/timeoff",
        "/admin/",
        "/admin/employees/$employeeGuid",
        "/admin/employees/new",
        "/admin/employees/"
      ]
    },
    "/employees": {
      "filePath": "employees.tsx"
    },
    "/onboarding": {
      "filePath": "onboarding.tsx"
    },
    "/admin/logs": {
      "filePath": "admin/logs.tsx",
      "parent": "/admin"
    },
    "/admin/provisioning": {
      "filePath": "admin/provisioning.tsx",
      "parent": "/admin"
    },
    "/admin/timeoff": {
      "filePath": "admin/timeoff.tsx",
      "parent": "/admin"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/admin/employees/$employeeGuid": {
      "filePath": "admin/employees/$employeeGuid.tsx",
      "parent": "/admin"
    },
    "/admin/employees/new": {
      "filePath": "admin/employees/new.tsx",
      "parent": "/admin"
    },
    "/admin/employees/": {
      "filePath": "admin/employees/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
